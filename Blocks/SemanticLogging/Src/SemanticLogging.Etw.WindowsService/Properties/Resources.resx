<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyInstalledService" xml:space="preserve">
    <value>The service is already installed or has been marked for deletion.</value>
  </data>
  <data name="ConfigFileNameNotFoundError" xml:space="preserve">
    <value>The configuration file was not found in the service config file 'appSettings' section with key name 'EtwConfigurationFileName'. </value>
  </data>
  <data name="ConsoleArgDescription" xml:space="preserve">
    <value>[ -c | -console ]		Run as a console application.</value>
  </data>
  <data name="EventSessionMessage" xml:space="preserve">
    <value>Event Trace Session prefix: {0}</value>
  </data>
  <data name="EventSourceDescriptionMessage" xml:space="preserve">
    <value>{0}, Level: {1}, MatchAnyKeyword: {2}</value>
  </data>
  <data name="EventSourceListMessage" xml:space="preserve">
    <value>Event sources:</value>
  </data>
  <data name="EventSourceNameMessage" xml:space="preserve">
    <value>Name: {0}</value>
  </data>
  <data name="HelpArgDescription" xml:space="preserve">
    <value>[ -h | -help | -? ]		Display list of arguments</value>
  </data>
  <data name="InstallArgDescription" xml:space="preserve">
    <value>[ -i | -install ]		Install as a Windows Service. </value>
  </data>
  <data name="InsufficientAccessPermission" xml:space="preserve">
    <value>The requested operation requires elevation.</value>
  </data>
  <data name="LoadedConfigurationMessage" xml:space="preserve">
    <value>Configuration settings loaded from file: {0}</value>
  </data>
  <data name="LoadingServiceConfigurationMessage" xml:space="preserve">
    <value>Loading configuration ...</value>
  </data>
  <data name="NotInstalledService" xml:space="preserve">
    <value>The service is not installed.</value>
  </data>
  <data name="RecyclingServiceOnConfigChanged" xml:space="preserve">
    <value>The configuration file changed and the current service instance will restart to reflect the changes.</value>
  </data>
  <data name="ServiceAlreadyStarted" xml:space="preserve">
    <value>The service is already running.</value>
  </data>
  <data name="ServiceDescription" xml:space="preserve">
    <value>This service can collect strongly typed events captured by event tracing for Windows (ETW) and foward to the configured EventListeners in the xml service configuration file. For further details read the service documentation.</value>
  </data>
  <data name="ServiceDisplayName" xml:space="preserve">
    <value>Enterprise Library Semantic Logging Out-of-Process Service</value>
  </data>
  <data name="ServiceNotStarted" xml:space="preserve">
    <value>The service cannot start because it is in '{0}' state.</value>
  </data>
  <data name="ServiceNotStartedTimeout" xml:space="preserve">
    <value>The service could not be started. Check the eventlog for more details.</value>
  </data>
  <data name="ServiceStarted" xml:space="preserve">
    <value>The service has started.</value>
  </data>
  <data name="ServiceStoppedMessage" xml:space="preserve">
    <value>Service stopped successfully.</value>
  </data>
  <data name="ShutdownServiceMessage" xml:space="preserve">
    <value>Closing all resources...</value>
  </data>
  <data name="SinkNameMessage" xml:space="preserve">
    <value>Sink name: {0}</value>
  </data>
  <data name="StartArgDescription" xml:space="preserve">
    <value>[ -s | -start ]			Start or install and start the service.</value>
  </data>
  <data name="StartedServiceMessage" xml:space="preserve">
    <value>Service started.</value>
  </data>
  <data name="StopServiceMessage" xml:space="preserve">
    <value>Press enter to end ...</value>
  </data>
  <data name="UninstallArgDescription" xml:space="preserve">
    <value>[ -u | -uninstall ]		Uninstall the Windows Service.</value>
  </data>
  <data name="UpdateConfigFileMessage" xml:space="preserve">
    <value>The configuration is incomplete. Please update the configuration. The service will detect the configuration file change and reload the new settings.</value>
  </data>
</root>